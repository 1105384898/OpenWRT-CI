name: OpenWRT-TEST  #设备型号，请用大写字母，请勿乱写

on:
  workflow_dispatch:

env:
  DEVICE_NAME: TEST  #设备型号，请用大写字母，请勿乱写
  DEVICE_TYPE: arm64  #设备内核类型，请用小写字母，请勿乱写
  DEVICE_IP: 192.168.2.1  #设备默认登陆地址
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  LEDE_URL: https://github.com/coolsnowwolf/lede.git
  LIST_URL: https://raw.githubusercontent.com/VIKINGYFY/OpenWRT-LEDE/main/Lists

permissions: write-all

jobs:
  build_openwrt:
    name: Build Firmware
    runs-on: ubuntu-latest
    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /etc/apt/sources.list.d* /usr/local/lib/android* /etc/docker* /etc/firefox* /etc/mysql* /etc/php* /opt/google* /usr/share/dotnet* /usr/share/google* /usr/share/moby* /usr/share/mysql* /usr/share/php*
          sudo -E apt -yqq update
          sudo -E apt -yqq purge azure* docker* dotnet* firefox* ghc* google* llvm* moby* mongodb* mysql* openjdk* php* powershell* snap* zulu*
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler dos2unix fastjar flex g++-multilib gawk gcc-multilib gettext git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs unzip upx-ucl vim wget xmlto xxd zlib1g-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq clean
          sudo -E apt -yqq autoclean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Check Projects
        uses: actions/checkout@v3

      - name: Check Scripts
        run: |
          cd ./Scripts

          chmod +x ./*.sh
          dos2unix ./*.sh

      - name: Clone LEDE Code
        run: |
          git clone --depth=1 --single-branch $LEDE_URL

      - name: Update Feeds
        run: |
          cd ./lede

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Scripts
        run: |
          cd ./lede

          #默认主机名
          sed -i "s/OpenWrt/$DEVICE_NAME/g" ./package/base-files/files/bin/config_generate
          #默认IP地址
          sed -i "s/192.168.1.1/$DEVICE_IP/g" ./package/base-files/files/bin/config_generate
          #默认主题
          sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' ./feeds/luci/collections/luci/Makefile
          #默认时间格式
          sed -i 's/os.date()/os.date("%Y-%m-%d %H:%M:%S %A")/g' $(find ./package/lean/autocore/files/ -type f -name "index.htm")

          cd ./package
          #Argon Theme
          git clone --depth=1 --single-branch --branch "18.06" https://github.com/jerrykuku/luci-theme-argon.git
          #Argon Config
          git clone --depth=1 --single-branch https://github.com/jerrykuku/luci-app-argon-config.git
          #Design Theme
          git clone --depth=1 --single-branch https://github.com/gngpp/luci-theme-design.git
          #Design Config
          git clone --depth=1 --single-branch https://github.com/gngpp/luci-app-design-config.git
          #OpenClash
          git clone --depth=1 --single-branch --branch "dev" https://github.com/vernesong/OpenClash.git

          #OpenClash Core
          export CORE_VER=https://raw.githubusercontent.com/vernesong/OpenClash/core/dev/core_version
          export CORE_TUN=https://github.com/vernesong/OpenClash/raw/core/dev/premium/clash-linux
          export CORE_DEV=https://github.com/vernesong/OpenClash/raw/core/dev/dev/clash-linux
          export CORE_MATE=https://github.com/vernesong/OpenClash/raw/core/dev/meta/clash-linux

          cd ./OpenClash/luci-app-openclash/root/etc/openclash
          mkdir ./core && cd ./core

          export TUN_VER=$(curl -sfL $CORE_VER | sed -n "2p")
          curl -sfL -o ./tun.gz "$CORE_TUN"-"$DEVICE_TYPE"-"$TUN_VER".gz
          gzip -d ./tun.gz
          mv ./tun ./clash_tun

          curl -sfL -o ./meta.tar.gz "$CORE_MATE"-"$DEVICE_TYPE".tar.gz
          tar -zxf ./meta.tar.gz
          mv ./clash ./clash_meta

          curl -sfL -o ./dev.tar.gz "$CORE_DEV"-"$DEVICE_TYPE".tar.gz
          tar -zxf ./dev.tar.gz

          chmod +x ./clash*
          rm -rf ./*.gz

      - name: Custom Settings
        run: |
          cd ./lede

          rm -rf ./tmp && rm -rf ./.config*
          cat $GITHUB_WORKSPACE/Config/R4S.txt $GITHUB_WORKSPACE/Config/General.txt >> .config

          make defconfig

      - name: Package Firmware
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          echo "DEVICE_IP=$DEVICE_IP" >> $GITHUB_ENV

          cd ./lede && mkdir ./test
          cp -rf ./.config ./test/R4S_$BUILD_DATE.txt

      - name: Release Firmware
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{env.DEVICE_NAME}}_Config_${{env.BUILD_DATE}}
          files: ./lede/test/*.txt
          body: |
            测试专用

      - name: Delete Old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 3
          delete_tags: true

      - name: Delete Old Workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 3
